{"ast":null,"code":"import { LIST_SET_BOARD, LIST_OPEN_BOARD, LIST_SET_FULL, LIST_ADD_ITEM, PROJECT_ERROR } from \"./actionTypes\";\nimport { v4 as uuid } from \"uuid\";\nimport store from \"../store\";\nimport axios from \"axios\";\nimport config from \"../config.json\";\nexport const toggle = (id, taskId) => dispatch => {\n  const {\n    list,\n    board\n  } = store.getState().list;\n  let to;\n  list[id].tasks.forEach(e => {\n    if (e.id === taskId) {\n      to = e.checked ? \"To do\" : \"Done\";\n      e.checked = !e.checked;\n    }\n  });\n  let flag = false;\n  for (let c in board[id].columns) {\n    for (let i of board[id].columns[c].items) {\n      if (i.id === taskId) {\n        board[id].columns[to].items.push(i);\n        board[id].columns[c].items = board[id].columns[c].items.filter(j => j.id !== taskId);\n        flag = true;\n        break;\n      }\n    }\n    if (flag) break;\n  }\n  dispatch({\n    data: {\n      list,\n      board\n    },\n    type: LIST_SET_FULL\n  });\n};\nexport const addTask = (board_id, content, deadline, description, membersAdded) => dispatch => {\n  const {\n    list,\n    board\n  } = store.getState().list;\n  const id = uuid();\n  list[board_id].tasks.push({\n    id,\n    content,\n    checked: false\n  });\n  board[board_id].columns[\"To do\"].items.push({\n    id,\n    content,\n    deadline,\n    description,\n    membersAdded\n  });\n  dispatch({\n    data: {\n      list,\n      board\n    },\n    type: LIST_SET_FULL\n  });\n};\nexport const addItem = title => dispatch => {\n  const id = uuid();\n  const list = {\n    [id]: {\n      title,\n      tasks: []\n    }\n  };\n  const board = {\n    [id]: {\n      columns: {\n        \"To do\": {\n          name: \"To do\",\n          index: 0,\n          items: []\n        },\n        Done: {\n          name: \"Done\",\n          index: 1,\n          items: []\n        }\n      },\n      title\n    }\n  };\n  dispatch({\n    data: {\n      list,\n      board\n    },\n    type: LIST_ADD_ITEM\n  });\n};\nexport const openBoard = (id, navigate, link) => dispatch => {\n  dispatch({\n    data: id,\n    type: LIST_OPEN_BOARD\n  });\n  navigate(link);\n};\nexport const delBoard = id => dispatch => {\n  const {\n    board_id,\n    list,\n    board\n  } = store.getState().list;\n  delete list[id];\n  delete board[id];\n  dispatch({\n    data: {\n      list,\n      board,\n      ...(board_id === id && {\n        board_id: undefined\n      })\n    },\n    type: LIST_SET_FULL\n  });\n};\nexport const onDragEnd = result => dispatch => {\n  if (!result.destination) return;\n  const {\n    source,\n    destination\n  } = result;\n  const {\n    board_id,\n    list,\n    board\n  } = store.getState().list;\n  const {\n    columns\n  } = board[board_id];\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    list[board_id].tasks.forEach(i => {\n      if (i.id === removed.id) i.checked = destination.droppableId === \"Done\";\n    });\n    board[board_id].columns = {\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: {\n        ...destColumn,\n        items: destItems\n      }\n    };\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    board[board_id].columns = {\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems\n      }\n    };\n  }\n  dispatch({\n    data: {\n      list,\n      board\n    },\n    type: LIST_SET_FULL\n  });\n};\nexport const addCol = (id, name) => dispatch => {\n  const {\n    board_id,\n    board\n  } = store.getState().list;\n  const {\n    columns\n  } = board[board_id];\n  const index = columns[id].index + 1;\n  for (let col in columns) {\n    if (columns[col].index >= index) {\n      columns[col].index++;\n    }\n  }\n  columns[uuid()] = {\n    name,\n    index,\n    items: []\n  };\n  board[board_id].columns = columns;\n  console.log(board);\n  dispatch({\n    data: board,\n    type: LIST_SET_BOARD\n  });\n};\nexport const delCol = id => dispatch => {\n  const {\n    board_id,\n    board\n  } = store.getState().list;\n  const {\n    columns\n  } = board[board_id];\n  const index = columns[id].index + 1;\n  if (columns[id].items.length !== 0) return;\n  for (let col in columns) {\n    if (columns[col].index >= index) {\n      columns[col].index--;\n    }\n  }\n  delete columns[id];\n  dispatch({\n    data: board,\n    type: LIST_SET_BOARD\n  });\n};\nexport const saveData = () => dispatch => {\n  const {\n    list,\n    project: {\n      project_id\n    },\n    login: {\n      user,\n      token\n    }\n  } = store.getState();\n  const req = {\n    list,\n    project_id,\n    user_email: user.email\n  };\n  axios.post(config.SERVER + \"/list/saveList\", req, {\n    headers: {\n      Authorization: token\n    }\n  }).then(res => {\n    if (res.data.success === false) throw Error(\"Error\");\n  }).catch(err => {\n    console.log(err);\n    if (err.response && err.response.data === \"Unauthorized\") {\n      dispatch({\n        data: true,\n        type: PROJECT_ERROR\n      });\n    }\n  });\n};","map":{"version":3,"names":["LIST_SET_BOARD","LIST_OPEN_BOARD","LIST_SET_FULL","LIST_ADD_ITEM","PROJECT_ERROR","v4","uuid","store","axios","config","toggle","id","taskId","dispatch","list","board","getState","to","tasks","forEach","e","checked","flag","c","columns","i","items","push","filter","j","data","type","addTask","board_id","content","deadline","description","membersAdded","addItem","title","name","index","Done","openBoard","navigate","link","delBoard","undefined","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","removed","splice","column","copiedItems","addCol","col","console","log","delCol","length","saveData","project","project_id","login","user","token","req","user_email","email","post","SERVER","headers","Authorization","then","res","success","Error","catch","err","response"],"sources":["/Users/pbaid.int/gaffar/client/src/action/actionList.js"],"sourcesContent":["import {\n  LIST_SET_BOARD,\n  LIST_OPEN_BOARD,\n  LIST_SET_FULL,\n  LIST_ADD_ITEM,\n  PROJECT_ERROR,\n} from \"./actionTypes\";\nimport { v4 as uuid } from \"uuid\";\nimport store from \"../store\";\nimport axios from \"axios\";\nimport config from \"../config.json\";\nexport const toggle = (id, taskId) => (dispatch) => {\n  const { list, board } = store.getState().list;\n\n  let to;\n  list[id].tasks.forEach((e) => {\n    if (e.id === taskId) {\n      to = e.checked ? \"To do\" : \"Done\";\n      e.checked = !e.checked;\n    }\n  });\n\n  let flag = false;\n  for (let c in board[id].columns) {\n    for (let i of board[id].columns[c].items) {\n      if (i.id === taskId) {\n        board[id].columns[to].items.push(i);\n        board[id].columns[c].items = board[id].columns[c].items.filter(\n          (j) => j.id !== taskId\n        );\n\n        flag = true;\n        break;\n      }\n    }\n\n    if (flag) break;\n  }\n\n  dispatch({\n    data: { list, board },\n    type: LIST_SET_FULL,\n  });\n};\n\nexport const addTask =\n  (board_id, content, deadline, description, membersAdded) => (dispatch) => {\n    const { list, board } = store.getState().list;\n\n    const id = uuid();\n\n    list[board_id].tasks.push({ id, content, checked: false });\n    board[board_id].columns[\"To do\"].items.push({\n      id,\n      content,\n      deadline,\n      description,\n      membersAdded,\n    });\n\n    dispatch({\n      data: { list, board },\n      type: LIST_SET_FULL,\n    });\n  };\n\nexport const addItem = (title) => (dispatch) => {\n  const id = uuid();\n\n  const list = {\n    [id]: {\n      title,\n      tasks: [],\n    },\n  };\n\n  const board = {\n    [id]: {\n      columns: {\n        \"To do\": {\n          name: \"To do\",\n          index: 0,\n          items: [],\n        },\n        Done: {\n          name: \"Done\",\n          index: 1,\n          items: [],\n        },\n      },\n      title,\n    },\n  };\n\n  dispatch({\n    data: { list, board },\n    type: LIST_ADD_ITEM,\n  });\n};\n\nexport const openBoard = (id, navigate, link) => (dispatch) => {\n  dispatch({\n    data: id,\n    type: LIST_OPEN_BOARD,\n  });\n\n  navigate(link);\n};\n\nexport const delBoard = (id) => (dispatch) => {\n  const { board_id, list, board } = store.getState().list;\n\n  delete list[id];\n  delete board[id];\n\n  dispatch({\n    data: {\n      list,\n      board,\n      ...(board_id === id && { board_id: undefined }),\n    },\n    type: LIST_SET_FULL,\n  });\n};\n\nexport const onDragEnd = (result) => (dispatch) => {\n  if (!result.destination) return;\n  const { source, destination } = result;\n\n  const { board_id, list, board } = store.getState().list;\n\n  const { columns } = board[board_id];\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n\n    list[board_id].tasks.forEach((i) => {\n      if (i.id === removed.id) i.checked = destination.droppableId === \"Done\";\n    });\n\n    board[board_id].columns = {\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        items: sourceItems,\n      },\n      [destination.droppableId]: {\n        ...destColumn,\n        items: destItems,\n      },\n    };\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n\n    board[board_id].columns = {\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems,\n      },\n    };\n  }\n\n  dispatch({\n    data: { list, board },\n    type: LIST_SET_FULL,\n  });\n};\n\nexport const addCol = (id, name) => (dispatch) => {\n  const { board_id, board } = store.getState().list;\n  const { columns } = board[board_id];\n\n  const index = columns[id].index + 1;\n\n  for (let col in columns) {\n    if (columns[col].index >= index) {\n      columns[col].index++;\n    }\n  }\n\n  columns[uuid()] = {\n    name,\n    index,\n    items: [],\n  };\n\n  board[board_id].columns = columns;\n\n  console.log(board);\n\n  dispatch({\n    data: board,\n    type: LIST_SET_BOARD,\n  });\n};\n\nexport const delCol = (id) => (dispatch) => {\n  const { board_id, board } = store.getState().list;\n  const { columns } = board[board_id];\n\n  const index = columns[id].index + 1;\n\n  if (columns[id].items.length !== 0) return;\n\n  for (let col in columns) {\n    if (columns[col].index >= index) {\n      columns[col].index--;\n    }\n  }\n\n  delete columns[id];\n\n  dispatch({\n    data: board,\n    type: LIST_SET_BOARD,\n  });\n};\n\nexport const saveData = () => (dispatch) => {\n  const {\n    list,\n    project: { project_id },\n    login: { user, token },\n  } = store.getState();\n\n  const req = {\n    list,\n    project_id,\n    user_email: user.email,\n  };\n\n  axios\n    .post(config.SERVER + \"/list/saveList\", req, {\n      headers: {\n        Authorization: token,\n      },\n    })\n    .then((res) => {\n      if (res.data.success === false) throw Error(\"Error\");\n    })\n    .catch((err) => {\n      console.log(err);\n      if (err.response && err.response.data === \"Unauthorized\") {\n        dispatch({\n          data: true,\n          type: PROJECT_ERROR,\n        });\n      }\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}